Only in .: diffout
diff -C2 ./MESSv2.v /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/MESSv2.v
*** ./MESSv2.v	2014-10-03 17:34:06.728156700 -0400
--- /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/MESSv2.v	2014-11-12 11:45:06.766338100 -0500
***************
*** 48,56 ****
  
  	localparam [31:0] IDENT = "SURF";
! 	localparam [3:0] VER_MONTH = 9;
! 	localparam [7:0] VER_DAY = 19;
  	localparam [3:0] VER_MAJOR = 3;
  	localparam [3:0] VER_MINOR = 8;
! 	localparam [7:0] VER_REV = 24;
  	localparam [3:0] VER_BOARDREV = 0;
     localparam [31:0] VERSION = {VER_BOARDREV,VER_MONTH,VER_DAY,VER_MAJOR,VER_MINOR,VER_REV};
--- 48,56 ----
  
  	localparam [31:0] IDENT = "SURF";
! 	localparam [3:0] VER_MONTH = 10;
! 	localparam [7:0] VER_DAY = 06;
  	localparam [3:0] VER_MAJOR = 3;
  	localparam [3:0] VER_MINOR = 8;
! 	localparam [7:0] VER_REV = 26;
  	localparam [3:0] VER_BOARDREV = 0;
     localparam [31:0] VERSION = {VER_BOARDREV,VER_MONTH,VER_DAY,VER_MAJOR,VER_MINOR,VER_REV};
Only in /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/: RF_Pow_Ben - Broken in some stupid wa.v
Only in /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/: RF_Pow_Ben - Copy - before read strobe hold.v
Only in /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/: RF_POW_Ben - toPatrick.v
diff -C2 ./RF_Pow_Ben.v /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/RF_Pow_Ben.v
*** ./RF_Pow_Ben.v	2014-09-17 22:42:24.363124700 -0400
--- /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/RF_Pow_Ben.v	2014-11-12 11:45:07.530321600 -0500
***************
*** 33,39 ****
      output AD_nRD,      //command to read (active low)
  	 
! 	 //chipscope debugging stuff
  	 output [11:0] AData_debug,
! 	 output [5:0] signals_debug, //5:4=sample_state, 3:2=write_state, 1=changeSig_flag, 0=changeSigHold_flag
  	 output [25:0] adder_debug,
  	 output [15:0] sampleCount_debug,
--- 33,39 ----
      output AD_nRD,      //command to read (active low)
  	 
! 	 //chipscope debugging outputs
  	 output [11:0] AData_debug,
! 	 output [6:0] signals_debug, //6:4=sample_state, 3:2=write_state, 1=changeSig_flag, 0=changeSigHold_flag
  	 output [25:0] adder_debug,
  	 output [15:0] sampleCount_debug,
***************
*** 41,49 ****
  	 output AD_nCONVST_debug,
  	 output AD_nRD_debug,
! 	 output AD_nBusy_debug
      );
  
  
  
  	reg AD_nRD_reg = 1;
  	reg AD_nCONVST_reg = 1;
--- 41,54 ----
  	 output AD_nCONVST_debug,
  	 output AD_nRD_debug,
! 	 output AD_nBusy_debug,
! 	 output rst_i_debug,
! 	 output [4:0] convst_timer_debug
      );
  
+ 	assign AData_debug = AData;
  
+ 	assign rst_i_debug = rst_i;
  
+ 	//ADC signals (LTC1415)
  	reg AD_nRD_reg = 1;
  	reg AD_nCONVST_reg = 1;
***************
*** 56,86 ****
  	assign AD_nCONVST_debug = AD_nCONVST;
  	assign AD_nRD_debug = AD_nRD;
- 	assign AD_nBusy_debug = AD_nBusy;
  
! 	//internal registers and wires
  	reg [15:0] block_ram [31:0];
! 	reg [15:0] block_ram_out;
  	reg [4:0] wr_addr_MSB = {5{1'b0}}; //512 is 9 bits
  	reg [4:0] wr_addr_LSB = {5{1'b0}};
  	reg [4:0] wr_timing_addr_MSB = {5{1'b0}};
  	reg [4:0] wr_timing_addr_LSB = {5{1'b0}};
! 	reg write = 1'b0;
! 	reg sample = 1'b0; // should I be adding up the power from the ADC? 1=yes, 0=no
! 	reg [1:0] wrapCount = {4{1'b0}}; //how many times it has wrapped around (block ram is 32 wide (2**5), 3 bits for channels (2**3), so only 2 bits for storage)
  	reg [15:0] sampleCount = {16{1'b0}}; //count how many samples I am taking
! 	reg [23:0] RF_PowAdder = {24{1'b0}}; //for adding up the power read up (top 12 bits are stored, like an average)
  	assign adder_debug = RF_PowAdder;
! 	
! 	reg [2:0] MUXSel_reg = {3{1'b0}};
! 	assign MUXSel = MUXSel_reg;
  
- 	reg [3:0] sample_timer = 0;
- 	wire [4:0] sample_timer_wrap = sample_timer + 1;
  	
! 	reg [17:0] Big_Counter = 0;
! 	wire [18:0] Big_Wrap = Big_Counter + 1;
! 	//flags for overall state machine
  	reg sample_flag = 0;         //start sampling machine
  	reg sampleHold_flag = 0;     //lets everything else know sample state machine is running (7 clocks, ~212ns)
  	
  	reg changeSig_flag = 0;      //change input
--- 61,99 ----
  	assign AD_nCONVST_debug = AD_nCONVST;
  	assign AD_nRD_debug = AD_nRD;
  
! 	reg AD_nBusy_reg = 1; //to make asynchronous external signal synchronous
! 	reg AD_nBusy_buf = 1; //I saw the thing get stuck, so lets add a buffer too
! 	assign AD_nBusy_debug = AD_nBusy_reg;
! 	
! 	//MUX signals
! 	reg [2:0] MUXSel_reg = {3{1'b0}};
! 	assign MUXSel = MUXSel_reg;
! 
! 	//internal registers and wires//
! 	//block ram data storage
  	reg [15:0] block_ram [31:0];
! 	
! 	//addressing for readout
  	reg [4:0] wr_addr_MSB = {5{1'b0}}; //512 is 9 bits
  	reg [4:0] wr_addr_LSB = {5{1'b0}};
  	reg [4:0] wr_timing_addr_MSB = {5{1'b0}};
  	reg [4:0] wr_timing_addr_LSB = {5{1'b0}};
! 	
! 	//sampling and data
  	reg [15:0] sampleCount = {16{1'b0}}; //count how many samples I am taking
! 	reg [1:0] sample_timer = 0;     //timer to ensure I don't try to sample faster than the ADC can handle
! 	reg [25:0] RF_PowAdder = {26{1'b0}}; //for adding up the power read up (top 12 bits are stored, like an average)
  	assign adder_debug = RF_PowAdder;
! 	reg [15:0] RFPWR_reg = {16{1'b0}};   //actual output for when the MESSv2 block reads the data
! 	assign RFPWR = RFPWR_reg;
! 	reg phase = 0; 						//lets us get a 6ms timing resolution, the highest bit will be the "RCO phase"
! 	reg [1:0] wrapCount = {4{1'b0}}; //how many times it has wrapped around (sort of a debug)
  
  	
! 	//flags for state machines
  	reg sample_flag = 0;         //start sampling machine
  	reg sampleHold_flag = 0;     //lets everything else know sample state machine is running (7 clocks, ~212ns)
+ 	reg [4:0] convst_timer = 0;  //timer that waits 26 clock cycles (780ns) for the conversion to finish
+ 	assign convst_timer_debug = convst_timer;
  	
  	reg changeSig_flag = 0;      //change input
***************
*** 88,130 ****
  	reg changeSigHold_flag = 0;  //the hold after changing input for everything to settle
  	assign signals_debug[0] = changeSigHold_flag;
  
- 	reg [1:0] rSector_pointer = 0;                  //flag to tell which of the four (32/8) banks is being read from
-  	reg [1:0] wSector_pointer = 0;                  //this is so the writes are full sectors and the reads are time ordered from ch0 to ch7 at least
- 	reg [1:0] wTimingSector_pointer = 0;            //for doing the timing readout
- 	
- 	
  	reg [2:0] sample_state = 0;  //the sampling state machine
! 	assign signals_debug[5:4] =  sample_state;
! 	reg [2:0] write_state = 0;   //the block ram writing state machine
  	assign signals_debug[3:2] =  write_state;	
  
  	wire [3:0] channelWrap = MUXSel_reg + 1; //will will be 'b1000 when it is about to wrap
  
! 	reg [5:0] changeSigHold_counter = 0;  //stores when switch occurrs so hold flag can be dropped 2uS after (64 clock cycles)
! 	wire [6:0] changeSigHold_counter_wrap = changeSigHold_counter + 1; //when this goes high, the mux is switched and settled
! 
! 	reg [15:0] RFPWR_reg = {16{1'b0}};
! 	
! 
! 	reg rSector_increment = 0;
! 
! 	always @ (posedge CLK) begin	//update the readout register with the read clock
! 		if (RAD[2:0] == 3'b000 && rSector_increment == 0) begin
! 			rSector_increment <= 1;
! 			rSector_pointer <= rSector_pointer + 1;
! 		end
! 		if (RAD[2:0] == 3'b001) begin
! 			rSector_increment <= 0;
! 		end
  		RFPWR_reg <= block_ram[RAD];
  	end
  
- 	assign RFPWR = RFPWR_reg;
- 	
- 
  	always @ (posedge CLK) begin //syncronous 33MHz clock! (30ns)
  
  		if (rst_i == 1) begin
- 			Big_Counter     <= 0;
  			sample_timer    <= 0;
  			sample_flag     <= 0;
--- 101,122 ----
  	reg changeSigHold_flag = 0;  //the hold after changing input for everything to settle
  	assign signals_debug[0] = changeSigHold_flag;
+ 	reg [5:0] changeSigHold_counter = 0;  //stores when switch occurrs so hold flag can be dropped 2uS after (64 clock cycles)
+ 	wire [6:0] changeSigHold_counter_wrap = changeSigHold_counter + 1; //when this goes high, the mux is switched and settled
+ 
  
  	reg [2:0] sample_state = 0;  //the sampling state machine
! 	assign signals_debug[6:4] =  sample_state;
! 	reg [1:0] write_state = 0;   //the block ram writing state machine
  	assign signals_debug[3:2] =  write_state;	
  
  	wire [3:0] channelWrap = MUXSel_reg + 1; //will will be 'b1000 when it is about to wrap
  
! 	always @ (posedge CLK) begin	//
  		RFPWR_reg <= block_ram[RAD];
  	end
  
  	always @ (posedge CLK) begin //syncronous 33MHz clock! (30ns)
  
  		if (rst_i == 1) begin
  			sample_timer    <= 0;
  			sample_flag     <= 0;
***************
*** 140,195 ****
  			AD_nCONVST_reg  <= 1;
  			AD_nRD_reg      <= 1;
  		end
! 
! 
! 		if (rst_i == 0) begin //do stuff if there isn't a reset
  		
- 		//increment the giant counter
- 		Big_Counter <= Big_Counter + 1;
  		
  		//decide to start sampling, unless you have already sampled up to the averaging limit (2**14 in this case)
! 		if (sample_timer_wrap[4] == 1) begin
  			sample_flag <= 1;   // (1uS) 1MHz sampling speed flag, starts sampling
  		end		
  		
! 		//sampling state starter, the most important state starter and very picky
! 		//requires: no sampling already, ADC not busy, state change not recent or in queue
! 		if (sample_flag == 1'b1 && sample_state == 3'b000 && AD_nBusy == 1'b1 && changeSig_flag == 0 && changeSigHold_flag == 0) begin
! 			sample_flag <= 0;
! 			sample_state <= 3'b001;
! 			sampleHold_flag <= 1;
! 			sampleCount <= sampleCount + 1; //if you get this far everything is locked out so the samplecount should be updated
! 		end
! 		
  		//sampling state machine
  		 case (sample_state)  
! 			3'b000: begin //hold state, wait until this counter fills before sampling
! 				sample_timer <= sample_timer + 1;
  				end
! 			3'b001: begin //start conversion by putting convert flag up
  				AD_nCONVST_reg <= 1'b0;
! 				sample_state <= sample_state + 1;
  				end
! 			3'b010: sample_state <= sample_state + 1; //hold convert low for 2 cycles for timing (50ns, 30ns per clock)
! 			3'b011: begin
! 				if (AD_nBusy == 0) begin //it can take up to 60ns for AD_nBusy to drop low, so ensure it has before moving on
! 					sample_state <= sample_state + 1;
! 				   end
  				end
! 			3'b100: begin
! 				if (AD_nBusy == 1) begin //this means that the conversion is done
  					AD_nCONVST_reg <= 1'b1;
! 					AD_nRD_reg <= 0;
! 					sample_state <= sample_state + 1;
! 					end
  				end
! 			3'b101: sample_state <= sample_state + 1; //hold read low for 2 cycles for timing (60ns)
! 			3'b110: sample_state <= sample_state + 1;
! 			3'b111: begin
! 				RF_PowAdder <= RF_PowAdder + AData;
! 				AD_nRD_reg <= 1;
! 				sample_state <= 3'b000; //done with sampling
! 				sampleHold_flag <= 0;
  				end
  
  		 endcase //end of sampling state machine case
--- 132,210 ----
  			AD_nCONVST_reg  <= 1;
  			AD_nRD_reg      <= 1;
+ 			convst_timer    <= 0;
  		end
! 		else begin //do stuff if there isn't a reset
  		
  		
  		//decide to start sampling, unless you have already sampled up to the averaging limit (2**14 in this case)
! 		if (sample_timer == 2'b10) begin
  			sample_flag <= 1;   // (1uS) 1MHz sampling speed flag, starts sampling
  		end		
  		
! 		//buffer the busy flag (twice I guess)
! 		AD_nBusy_buf <= AD_nBusy;
! 		AD_nBusy_reg <= AD_nBusy_buf;
! 
! 
  		//sampling state machine
  		 case (sample_state)  
! 			3'd0: begin //hold state, wait until this counter fills before sampling
! 				//sampling state starter, the most important state starter and very picky
! 					//requires: no sampling already, ADC not busy, state change not recent or in queue
! 				if (sample_flag == 1 && changeSig_flag == 0 && changeSigHold_flag == 0) begin
! 					sample_state <= 3'd1;
! 					sampleHold_flag <= 1;
! 					sampleCount <= sampleCount + 1;
  				end
! 				else begin
! 					sample_timer <= sample_timer + 1;
! 					sample_state <= 3'd0;
! 					end
! 				end
! 			3'd1: begin //start conversion by putting convert flag low
  				AD_nCONVST_reg <= 1'b0;
! 				sample_state <= 3'd2;
! 			end
! 			3'd2: begin //wait 60ns (2 clock cycles) for conversion to start
! 				if (convst_timer == 5'd3) begin //it can take up to 60ns for AD_nBusy to drop low, so wait that long
! 					sample_state <= 3'd3;
! 					convst_timer <= 0;
  				end
! 			   else begin
! 					sample_state <= 3'd2;
! 					convst_timer <= convst_timer + 1;
  				end
! 			end
! 			3'd3: begin //once conversion starts, wait 700ns at least for conversion to finish
! 				if (convst_timer == 5'd25) begin //wait 25clock cycles (750ns) for the conversion to finish
  					AD_nCONVST_reg <= 1'b1;
! 					AD_nRD_reg <= 1'b0;
! 					sample_state <= 3'd4;
! 					convst_timer <= 0;
! 				end
! 				else begin
! 					sample_state <= 3'd3;
! 					convst_timer <= convst_timer + 1;
  				end
! 			end
! 			3'd4: begin //once conversion finishes, read data into adder
! 				if (convst_timer == 5'd2) begin
! 					convst_timer <= 0;
! 					RF_PowAdder <= RF_PowAdder + AData;
! 					AD_nRD_reg <= 1'b1;
! 					sample_state <= 3'd0; //done with sampling reset everything
! 					sampleHold_flag <= 0;
! 					sample_timer <= 0;
! 					sample_flag <= 0;
  				end
+ 				else begin
+ 					sample_state <= 3'd4;
+ 					convst_timer <= convst_timer + 1;
+ 				end
+ 			end
+ 
+ 			default: begin
+ 				sample_state <= 3'd0;
+ 			end
  
  		 endcase //end of sampling state machine case
***************
*** 199,220 ****
  		//update the register to write the data to, dependant on where the RAD is and what the mux channel is
  		// 32 (2**5) blocks to write into, separate into 4 sectors
- 		wSector_pointer <= "00"; // always writes rf power in the same bank
  		if (write_state == 2'd1) begin
  			wr_addr_MSB[2:0] <= MUXSel_reg;
! 			wr_addr_MSB[4:3] <= "01";
  			
  			wr_addr_LSB[2:0] <= MUXSel_reg;
! 			wr_addr_LSB[4:3] <= "00";
! 			
! 			wr_timing_addr_LSB[0] <= "0";
! 			wr_timing_addr_LSB[4] <= "1";
! 			wr_timing_addr_LSB[3] <= MUXSel_reg[2];
! 			wr_timing_addr_LSB[2:1] <= MUXSel_reg[1:0];
! 			
! 			wr_timing_addr_MSB[0] <= "1";
! 			wr_timing_addr_MSB[4] <= "1";
! 			wr_timing_addr_MSB[3] <= MUXSel_reg[2];
! 			wr_timing_addr_MSB[2:1] <= MUXSel_reg[1:0];
! 			
  			write_state <= write_state + 1;
  		end
--- 214,224 ----
  		//update the register to write the data to, dependant on where the RAD is and what the mux channel is
  		// 32 (2**5) blocks to write into, separate into 4 sectors
  		if (write_state == 2'd1) begin
  			wr_addr_MSB[2:0] <= MUXSel_reg;
! 			wr_addr_MSB[4:3] <= 2'b01;
  			
  			wr_addr_LSB[2:0] <= MUXSel_reg;
! 			wr_addr_LSB[4:3] <= 2'b00;
! 
  			write_state <= write_state + 1;
  		end
***************
*** 229,240 ****
  		//write out the highest bits of the adder (an average essentially) to the block ram
  		if (write_state == 2'd3) begin
! 			block_ram[wr_addr_MSB] <= RF_PowAdder[23:8]; //average done here too, lose bottom 14 bits (rounding is wrong but oh well)
! 			block_ram[wr_addr_LSB] <= RF_PowAdder[7:0]; //also store the least significant bits!
! 			RF_PowAdder <= {24{1'b0}}; //null out adder
! 			sampleCount <= {16{1'b0}}; //null out counter
  			
! 			block_ram[wr_timing_addr_LSB] <= Big_Counter[15:0];
! 			block_ram[wr_timing_addr_MSB] <= Big_Counter[17:16];
! 			Big_Counter <= {18{1'b0}};
  			
  			write_state <= 0; //turn off write flag after you've written
--- 233,243 ----
  		//write out the highest bits of the adder (an average essentially) to the block ram
  		if (write_state == 2'd3) begin
! 			block_ram[wr_addr_MSB] <= {phase,RF_PowAdder[23:9]}; //top bit is "phase", which shows the last position of the write
! 			block_ram[wr_addr_LSB] <= {RF_PowAdder[8:0],RF_PowAdder[25:24]}; //also store the least significant bits!
! 			
! 			block_ram[{2'b10,wr_addr_MSB[2:0]}] <= AData; //since I have a ton of room, just copy the old functionality here to this block
  			
! 			RF_PowAdder <= 0; //null out adder
! 			sampleCount <= 0; //null out counter
  			
  			write_state <= 0; //turn off write flag after you've written
***************
*** 244,249 ****
  
  	
! 		//Switch MUX when you've taken enough samples
! 		if (sampleCount == 4096 && changeSigHold_flag == 0) begin
  			changeSig_flag <= 1;  //stays high until switch is completed (in case flag raises during sampling)
  		end
--- 247,254 ----
  
  	
! 		//Switch MUX when you've taken enough samples 
! 			//(34 clock cycles per sample * 30ns period = 1020ns/samp)
! 			//(100ms / (1020ns/samp*8chan) = 12255 samples/chan) ~14bits (110^2 = 12100 so lets go with that)
! 		if (sampleCount == 10000 && changeSigHold_flag == 0) begin
  			changeSig_flag <= 1;  //stays high until switch is completed (in case flag raises during sampling)
  		end
***************
*** 254,258 ****
  		//don't change while sampling is happening
  		if (changeSig_flag == 1 && sampleHold_flag == 0) begin
! 		   wrapCount <= wrapCount + channelWrap[3]; //incriment debug wrap if needed (channelWrap[3] is a wire that will be 1 when it is about to wrap)
  			changeSig_flag <= 0;                     //lower flag cuz you just changed successfully
  			sample_timer <= 0;                       //reset sample timer, otherwise you'll get a delay the size of the counter
--- 259,266 ----
  		//don't change while sampling is happening
  		if (changeSig_flag == 1 && sampleHold_flag == 0) begin
! 			if (MUXSel_reg == 3'b000) begin //after you wrap from ch7->ch0 do some extra stuff
! 				wrapCount <= wrapCount + 1; //incriment debug wrap if needed (channelWrap[3] is a wire that will be 1 when it is about to wrap)
! 				phase <= ~phase;            //switch the phase so the data reflects where the "Hit Bus" is located
! 			end
  			changeSig_flag <= 0;                     //lower flag cuz you just changed successfully
  			sample_timer <= 0;                       //reset sample timer, otherwise you'll get a delay the size of the counter
diff -C2 ./TOP_v38.v /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/TOP_v38.v
*** ./TOP_v38.v	2014-09-18 14:30:42.665304900 -0400
--- /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/TOP_v38.v	2014-11-12 11:45:08.762050100 -0500
***************
*** 332,342 ****
  	
  	wire [11:0] AData_debug;
! 	wire [5:0] signals_debug;
! 	wire [25:0] adder_debug;
  	wire [15:0] sampleCount_debug;
! 	wire AD_nCS_debug;
  	wire AD_nCONVST_debug;
  	wire AD_nRD_debug;
  	wire [34:0] RFpower_debug;
  	
     RF_Pow_Ben  u_RF_power(
--- 332,345 ----
  	
  	wire [11:0] AData_debug;
! 	wire [7:0] signals_debug;
! 	wire [27:0] adder_debug;
  	wire [15:0] sampleCount_debug;
! 	wire AD_nBusy_debug;
  	wire AD_nCONVST_debug;
  	wire AD_nRD_debug;
+ 	wire rst_i_debug;
+ 	wire [31:0] Big_Counter_debug;
  	wire [34:0] RFpower_debug;
+ 	wire [4:0] convst_timer_debug;
  	
     RF_Pow_Ben  u_RF_power(
***************
*** 352,365 ****
      .AD_nRD(AD_NRD),     //command to read (active low)
  	 .rst_i(clr_all),
! 	 //debug signal
  	  .AData_debug(AData_debug),
! 	  .signals_debug(signals_debug), //5:4=sample_state, 3:2=write_state, 1=changeSig_flag, 0=changeSigHold_flag
  	  .adder_debug(adder_debug),
  	  .sampleCount_debug(sampleCount_debug),
! 	  .AD_nCS_debug(AD_nCS_debug),
  	  .AD_nCONVST_debug(AD_nCONVST_debug),
! 	  .AD_nRD_debug(AD_nRD_debug)
      );
!     assign RFpower_debug[20:0] = { AD_nRD_debug, AD_nCONVST_debug, AD_nCS_debug, signals_debug, AData_debug };
      
  	 
--- 355,371 ----
      .AD_nRD(AD_NRD),     //command to read (active low)
  	 .rst_i(clr_all),
! 	 //debug signals
  	  .AData_debug(AData_debug),
! 	  .signals_debug(signals_debug), //6:4=sample_state, 3:2=write_state, 1=changeSig_flag, 0=changeSigHold_flag
  	  .adder_debug(adder_debug),
  	  .sampleCount_debug(sampleCount_debug),
! 	  .AD_nBusy_debug(AD_nBusy_debug),
  	  .AD_nCONVST_debug(AD_nCONVST_debug),
! 	  .AD_nRD_debug(AD_nRD_debug),
! 	  .rst_i_debug(rst_i_debug),
! 	  .convst_timer_debug(convst_timer_debug)
      );
!     assign RFpower_debug[34:0] = {adder_debug[25:23],convst_timer_debug,rfp_addr,rst_i_debug, AD_nRD_debug, AD_nCONVST_debug, AD_nBusy_debug, signals_debug[6:0], AData_debug };
! 	 //adder_debug=34:32 convst_timer=32:28 rfp_addr=27:23 rst_i=22 AD_nRD=21 AD_nCONVST=20 AD_nBusy=19 signals_debug=18:12 AData_debug=11:0
      
  	 
Common subdirectories: ./Verilog_Library and /cygdrive/c/Users/barawn/Downloads/firmware-SURF_3_8_26/firmware-SURF_3_8_26/rtl/Verilog_Library
